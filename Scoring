integer message_channel;
key object;
string ball_name = "[BBS] Skeeball Ball";

integer hole_count = 8;
list hole_links;
string hole_name = "hole";

integer score;
integer scoreboard_link;
string scoreboard_name = "scoreboard";
list digital_numbers = ["22569582-40bd-5d95-254e-644cc4ef5129","4241ac4c-0b63-69d8-f048-d24d3bbd58ac","92e5fe83-cea4-6bfd-c32c-21ee32a15b90","7ab4ca65-528f-aeab-f7c4-de7e9dd0cd48","11dceab3-9121-d9ac-8741-34ccaa509f0d","d9d87ec3-7379-c859-e663-d7641736df08","5ae3f95c-91e8-9683-2666-7b2ae1ebd9b0","c3d04bb9-2a91-6857-944a-8a73caaf1f42","6df27617-a5f8-8f14-f196-490089ba8955","4196499f-7554-16ea-d545-2bad00f2f045","ae8f016c-8ccc-b1d0-3a6a-213d1ba8e13a"];

integer ballcount;
integer ballcount_link;
string ballcount_name = "ballcount";

scoreboard_set() //updates scoreboard based on the current score at time of call to the function
{
    integer i = llStringLength((string)score);
    integer faces = llGetLinkNumberOfSides(scoreboard_link);
    while (i > 0)
    {
        integer subscore = (integer)llGetSubString((string)score, i-1, i-1);
        llSetLinkPrimitiveParamsFast(scoreboard_link, [PRIM_TEXTURE, faces-1, llList2Key (digital_numbers, subscore+1), <1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0]);
        faces --;
        i --;
    }
    llSetLinkPrimitiveParamsFast(ballcount_link, [PRIM_TEXTURE, 3, llList2Key(digital_numbers, ballcount + 1), <1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0]);
}

scoreboard_clear()
{
    llSetLinkPrimitiveParamsFast(scoreboard_link, [PRIM_TEXTURE, ALL_SIDES, llList2Key (digital_numbers, 0), <1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0, PRIM_COLOR, ALL_SIDES, <1.0, 1.0, 1.0>, 1.0, PRIM_GLOW,  ALL_SIDES, 0.0]);
    llSetLinkPrimitiveParamsFast(ballcount_link, [PRIM_TEXTURE, 3, llList2Key(digital_numbers, 0), <1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0]);
}

integer Key2Chan(key ID) 
{
    return 0x80000000 | (integer)("0x"+(string)ID);
}

integer Name2LinkNum(string sName)
{
    integer i;
    integer iPrims;
    //
    if (llGetAttached()) iPrims = llGetNumberOfPrims(); else iPrims = llGetObjectPrimCount(llGetKey());
    for (i = iPrims; i >= 0; i--) if (llList2String(llGetLinkPrimitiveParams(i, [PRIM_NAME]), 0) == sName) return i;
    return -1;
}

default
{
	state_entry()
	{
		scoreboard_link = Name2LinkNum(scoreboard_name);
		ballcount_link = Name2LinkNum(ballcount_name);

		integer i = 1;
		while (i <= hole_count) //get hole prim link numbers
		{
			hole_links += Name2LinkNum( hole_name + "_" +(string)i);
			i++;
		}

		scoreboard_clear();
	}
	collision(integer num_detected)
	{
		if (llListFindList(hole_links, [llDetectedLinkNumber(0)]) != -1) //check if the ball collided with a hole prim
		{
			if (object == llDetectedKey(0)) //check for duplicate collision
			{
				llSay(message_channel, "die");
			}
			else if (llKey2Name(llDetectedKey(0)) == ball_name) //check if ball collided with hole
	        {
	            object = llDetectedKey(0);
	            message_channel = Key2Chan(object);
	            llSay(message_channel, "die"); //delete ball

	            ballcount ++; //add to ballcount when a proper collision is detected
	            llOwnerSay((string)ballcount);
	            score += llList2Integer(llGetLinkPrimitiveParams(llDetectedLinkNumber(0), [PRIM_DESC]), 0); //grab prim description of the hole which holds the assigned points and add points to score
	            scoreboard_set(); //update scoreboard to reflect new score
	        }
		}
	}
}